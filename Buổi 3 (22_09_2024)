{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ARNqRFYrPU5TYHQhXiG6u3fxc9jhqc96","timestamp":1727343098708}],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"NzePb4xqYv4W"},"outputs":[],"source":["#When you write a class, you define the general behavior that a whole category of objects can have\n","class Dog:\n","#A simple attempt to model a dog.\n","#The \"self\" parameter is required in the method definition, and it must come first, before the other parameters\n","  def __init__(self, name, age):\n","#   Initialize name and age attributes.\n","    self.name = name\n","    self.age = age\n","  def sit(self):\n","#   Simulate a dog sitting in response to a command.\n","    print(self.name + \" is now sitting.\")\n","  def roll_over(s):\n","#   Simulate rolling over in response to a command.\n","    print(self.name + \" rolled over!\")"]},{"cell_type":"code","source":["my_dog = Dog('Willie', 7)\n","print(\"My dog's name is \" + my_dog.name + \".\")\n","print(\"My dog is \" + str(my_dog.age) + \" years old.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BzJCqlZYgZ_W","executionInfo":{"status":"ok","timestamp":1727269102066,"user_tz":-420,"elapsed":371,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"9b2ca41e-1ba0-494a-f88e-58a9120a9df1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["My dog's name is Willie.\n","My dog is 7 years old.\n"]}]},{"cell_type":"code","source":["my_dog.name"],"metadata":{"id":"OoVpaArTg_P-","executionInfo":{"status":"ok","timestamp":1727246951383,"user_tz":-420,"elapsed":8,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"f200e6bd-3dbd-47bc-a82b-a59dd30d42ee","colab":{"base_uri":"https://localhost:8080/","height":35}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Willie'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["my_dog.sit()\n","my_dog.roll_over()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"luThjka8vvbk","executionInfo":{"status":"ok","timestamp":1727246951383,"user_tz":-420,"elapsed":7,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"80e880b0-30d4-46c0-8afa-467b3e4d769e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Willie is now sitting.\n","Willie rolled over!\n"]}]},{"cell_type":"code","source":["#Creating Multiple Instances\n","your_dog = Dog('Lucy', 3)\n","print(\"My dog's name is \"  + my_dog.name)\n","print(\"My dog is \" + str(my_dog.age) + \" years old.\")\n","my_dog.sit()\n","print(\"\\nYour dog's name is \" + str(your_dog.name) + \".\")\n","print(\"Your dog is \" + str(your_dog.age) + \" years old.\")\n","your_dog.sit()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5HBmbqAM8EHH","executionInfo":{"status":"ok","timestamp":1727253546240,"user_tz":-420,"elapsed":829,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"a1358dff-438d-43da-a00d-8d02c88318ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["My dog's name is Willie\n","My dog is 7 years old.\n","Willie is now sitting.\n","\n","Your dog's name is Lucy.\n","Your dog is 3 years old.\n","Lucy is now sitting.\n"]}]},{"cell_type":"code","source":["#The car class\n","class Car:\n","  #A simple attempt to represent a car.\n","  def __init__(self, make, model, year):\n","  #Initialize attributes to describe a car.\n","    self.make = make\n","    self.model = model\n","    self.year = year\n","  def get_descriptive_name(self):\n","  #Return a neatly formatted descriptive name.\n","    long_name = str(self.year) + \" \" + self.make + \" \" + self.model\n","    return long_name\n","my_new_car = Car('audi', 'a4', 2024)\n","print(my_new_car.get_descriptive_name())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yp2xVLYcuIil","executionInfo":{"status":"ok","timestamp":1727260222980,"user_tz":-420,"elapsed":407,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"7ffe9562-96b8-4b68-e5d5-5df9745043f3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2024 audi a4\n"]}]},{"cell_type":"code","source":["#Add an attribute that changes over time\n","class Car:\n","  #A simple attempt to represent a car.\n","  def __init__(self, make, model, year):\n","  #Initialize attributes to describe a car.\n","    self.make = make\n","    self.model = model\n","    self.year = year\n","    self.odometer_reading = 0\n","  def get_descriptive_name(self):\n","  #Return a neatly formatted descriptive name.\n","    long_name = str(self.year) + \" \" + self.make + \" \" + self.model\n","    return long_name\n","  def read_odometer(self):\n","  #Print a statement showing the car's mileage.\n","    print(f\"This car has {self.odometer_reading} miles on it.\")\n","my_new_car = Car('audi', 'a4', 2024)\n","print(my_new_car.get_descriptive_name())\n","my_new_car.read_odometer()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EmsVWdTFvqVY","executionInfo":{"status":"ok","timestamp":1727261878939,"user_tz":-420,"elapsed":2,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"31810557-c8d3-446d-9301-88a7b7eb8438"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2024 audi a4\n","This car has 0 miles on it.\n"]}]},{"cell_type":"code","source":["#Modify an Attribute's Value directly\n","my_new_car.odometer_reading = 23\n","my_new_car.read_odometer()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zMrHb6ua1JjE","executionInfo":{"status":"ok","timestamp":1727261914050,"user_tz":-420,"elapsed":434,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"cdb245b0-6323-4353-e8f8-f281b869d692"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["This car has 23 miles on it.\n"]}]},{"cell_type":"code","source":["#Modifying an Attribute’s Value Through a Method\n","class Car:\n","  #A simple attempt to represent a car.\n","  def __init__(self, make, model, year):\n","  #Initialize attributes to describe a car.\n","    self.make = make\n","    self.model = model\n","    self.year = year\n","    self.odometer_reading = 0\n","  def get_descriptive_name(self):\n","  #Return a neatly formatted descriptive name.\n","    long_name = str(self.year) + \" \" + self.make + \" \" + self.model\n","    return long_name\n","  def read_odometer(self):\n","  #Print a statement showing the car's mileage.\n","    print(\"This car has \" + str(self.odometer_reading) + \" miles on it.\")\n","  def update_odometer(self, mileage):\n","  #Set the odometer reading to the given value.\n","    self.odometer_reading = mileage\n","my_new_car = Car('audi', 'a4', 2024)\n","print(my_new_car.get_descriptive_name())\n","my_new_car.update_odometer(23)\n","my_new_car.read_odometer()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kgKuWXZ31NlM","executionInfo":{"status":"ok","timestamp":1727262815605,"user_tz":-420,"elapsed":380,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"7151844c-d1cf-4586-a3a8-537ab199d1b8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2024 audi a4\n","This car has 23 miles on it.\n"]}]},{"cell_type":"code","source":["#Inheritance\n","#You don’t always have to start from scratch when writing a class. If the class\n","#you’re writing is a specialized version of another class you wrote, you can use inheritance.\n","\n","class ElectricCar(Car):\n","#Represent aspects of a car, specific to electric vehicles.\n","  def __init__(self, make, model, year):\n","  #Initialize attributes of the parent class.\n","    super().__init__(make, model, year)\n","    #The super() function is a special function that allows you to call a method from the parent class.\n","my_leaf = ElectricCar('nissan', 'leaf', 2024)\n","print(my_leaf.get_descriptive_name())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JRfLWfY63ZyM","executionInfo":{"status":"ok","timestamp":1727262818478,"user_tz":-420,"elapsed":376,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"75040d21-7902-4cd0-9bec-ef19ec0f8354"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2024 nissan leaf\n"]}]},{"cell_type":"code","source":["#Defining Attributes and Methods for the Child Class\n","class ElectricCar(Car):\n","  def __init__(self, make, model, year):\n","    super().__init__(make, model, year)\n","    self.battery_size = 40\n","  def describe_battery(self):\n","  #Print a statement describing the battery size.\n","    print(\"This car has a \" + str(self.battery_size) + \"-kWh battery.\")\n","my_leaf = ElectricCar('nissan', 'leaf', 2024)\n","print(my_leaf.get_descriptive_name())\n","my_leaf.describe_battery()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_ELLGn9b5oSH","executionInfo":{"status":"ok","timestamp":1727272478825,"user_tz":-420,"elapsed":401,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"bef765a3-a42e-41fa-c14f-ec9e76786d6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2024 nissan leaf\n","This car has a 40-kWh battery.\n"]}]},{"cell_type":"code","source":["from typing_extensions import ParamSpecArgs\n","class Car:\n","  #A simple attempt to represent a car.\n","  def __init__(self, make, model, year):\n","  #Initialize attributes to describe a car.\n","    self.make = make\n","    self.model = model\n","    self.year = year\n","    self.odometer_reading = 0\n","  def get_descriptive_name1(self):\n","  #Return a neatly formatted descriptive name.\n","    long_name = str(self.year) + \" \" + self.make + \" \" + self.model\n","    return long_name\n","  def read_odometer1(self):\n","  #Print a statement showing the car's mileage.\n","    print(\"This car has \" + str(self.odometer_reading) + \" miles on it.\")\n","  def update_odometer1(self, mileage):\n","  #Set the odometer reading to the given value.\n","    self.odometer_reading = mileage\n","\n","class Motorbike:\n","  #A simple attempt to represent a car.\n","  def __init2__(self, color, model, year):\n","  #Initialize attributes to describe a car.\n","    self.color = color\n","    self.model = model\n","    self.year = year\n","    self.odometer_reading = 0\n","  def get_descriptive_name2(self):\n","  #Return a neatly formatted descriptive name.\n","    long_name = self.make + \" \" + str(self.year) + \" \" + self.model\n","    return long_name\n","  def read_odometer2(self):\n","  #Print a statement showing the car's mileage.\n","    print(\"This car has \" + str(self.odometer_reading) + \" miles on it.\")\n","  def update_odometer2(self, mileage):\n","  #Set the odometer reading to the given value.\n","    self.odometer_reading = mileage\n","\n","class MeansTransport(Motorbike,Car):\n","  def __init__(self, make, color, model, year):\n","    super().__init__(make, model, year)\n","    super().__init2__(color, model, year)\n","\n","Xe = MeansTransport(\"a4\",\"Blue\",\"Audi\",2020)\n","print(Xe.color)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BK_kP-hefPRY","executionInfo":{"status":"ok","timestamp":1727274039018,"user_tz":-420,"elapsed":4,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"dd837195-3e66-4af0-c289-5ab0aed7eae6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Blue\n"]}]},{"cell_type":"code","source":["#Overriding Methods from the Parent Class\n","#You can override any method from the parent class that doesn’t fit what you’re trying to model with the child class.\n","#To do this, you define a method in the child class with the same name as the method you want to override in the parent class."],"metadata":{"id":"wNLGl8gY7-cD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Importing classes\n","#Assume that the Car class has been written in the module car.py\n","from car import Car\n","\n","#Storing Multiple Classes in a Module\n","#The module car.py can contain as many classes as you like\n","from car import ElectricCar\n","\n","#Importing Multiple Classes from a Module\n","from car import Car, ElectricCar\n","my_mustang = Car('ford', 'mustang', 2024)\n","print(my_mustang.get_descriptive_name())\n","my_leaf = ElectricCar('nissan', 'leaf', 2024)\n","print(my_leaf.get_descriptive_name())\n","\n","#Importing an Entire Module\n","import car\n","#Then we can use any class in the module car\n","\n","#Using Aliases\n","from electric_car import ElectricCar as EC"],"metadata":{"id":"GVs-AB4T9t1c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import math\n","print(math.pi)\n","print(math.sqrt(4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UnD2irQjlz3c","executionInfo":{"status":"ok","timestamp":1727274652769,"user_tz":-420,"elapsed":420,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"a8a6650f-7b22-41c2-dd1d-9a19761c6985"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3.141592653589793\n","2.0\n"]}]},{"cell_type":"code","source":["#Files\n","from pathlib import Path\n","path = Path('pi.txt')\n","#print(type(path))\n","contents = path.read_text()\n","print(type(contents))\n","print(contents)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PTBe_0QW_Pa_","executionInfo":{"status":"ok","timestamp":1727274890298,"user_tz":-420,"elapsed":362,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"3d4bcd36-3bd2-4912-de6f-268bdd3b5cc0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'str'>\n","3.141592653589793238462643383279\n"]}]},{"cell_type":"code","source":["#Writing to a File\n","from pathlib import Path\n","\n","#Writing a Single Line\n","path = Path('programming.txt')\n","path.write_text(\"I love programming.\")\n","\n","#Writing Multiple Lines\n","contents = \"I love programming.\\n\"\n","contents += \"I love creating new games.\\n\"\n","contents += \"I also love working with data.\\n\"\n","path = Path('programming2.txt')\n","path.write_text(contents)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K6dfzb8pB5kw","executionInfo":{"status":"ok","timestamp":1727274992384,"user_tz":-420,"elapsed":381,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"00de263d-af8f-4c71-a4f7-9cdecfc9cb60"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["78"]},"metadata":{},"execution_count":74}]},{"cell_type":"code","source":["#Exceptions\n","print(5/0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"wlK_PEjdDtWh","executionInfo":{"status":"error","timestamp":1727265705128,"user_tz":-420,"elapsed":432,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"1a23927a-f4ce-4891-e9af-67f88d479bd7"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ZeroDivisionError","evalue":"division by zero","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-8a43befc758a>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Exceptions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"]}]},{"cell_type":"code","source":["try:\n","  print(5/0)\n","except ZeroDivisionError:\n","  print(\"You can't divide by zero!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zti-J9soDxb3","executionInfo":{"status":"ok","timestamp":1727275124347,"user_tz":-420,"elapsed":379,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"3a68fe09-e931-4205-d571-cba4bc65a34b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["You can't divide by zero!\n"]}]},{"cell_type":"code","source":["#Using Exceptions to Prevent Crashes\n","print(\"Give me two numbers, and I'll divide them.\")\n","print(\"Enter 'q' to quit.\")\n","\n","while True:\n","  first_number = input(\"\\nFirst number: \")\n","  if first_number == 'q':\n","    break\n","  second_number = input(\"Second number: \")\n","  if second_number == 'q':\n","    break\n","  answer = int(first_number) / int(second_number)\n","  print(answer)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":358},"id":"IlQ8aEmTD3S0","executionInfo":{"status":"error","timestamp":1727275187895,"user_tz":-420,"elapsed":28898,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"c9b6cc52-3b8c-4c24-f6fb-1ce8bee277a0"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Give me two numbers, and I'll divide them.\n","Enter 'q' to quit.\n","\n","First number: 3\n","Second number: 2\n","1.5\n","\n","First number: 3\n","Second number: 0\n"]},{"output_type":"error","ename":"ZeroDivisionError","evalue":"division by zero","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-78-0214030ecd28>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0msecond_number\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'q'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m   \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfirst_number\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msecond_number\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mZeroDivisionError\u001b[0m: division by zero"]}]},{"cell_type":"code","source":["print(\"Give me two numbers, and I'll divide them.\")\n","print(\"Enter 'q' to quit.\")\n","\n","while True:\n","  first_number = input(\"\\nFirst number: \")\n","  if first_number == 'q':\n","    break\n","  second_number = input(\"Second number: \")\n","  if second_number == 'q':\n","    break\n","  try:\n","    answer = int(first_number) / int(second_number)\n","    print(answer)\n","  except ZeroDivisionError:\n","    print(\"You can't divide by zero!\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nFIIdXDOEhZg","executionInfo":{"status":"ok","timestamp":1727275239215,"user_tz":-420,"elapsed":37999,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"14bdec4b-fac4-4087-afa6-8eb82afc0e7a"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Give me two numbers, and I'll divide them.\n","Enter 'q' to quit.\n","\n","First number: 3\n","Second number: 1\n","3.0\n","\n","First number: 3\n","Second number: 0\n","You can't divide by zero!\n","\n","First number: 4\n","Second number: 2\n","2.0\n","\n","First number: q\n"]}]},{"cell_type":"code","source":["#Storing Data\n","#Using json.dumps() and json.loads()\n","from pathlib import Path\n","import json\n","numbers = [2, 3, 5, 7, 11, 13]\n","path = Path('numbers.json')\n","path = Path('numbers2.txt')\n","contents = json.dumps(numbers)\n","path.write_text(contents)\n","\n","numbers2 = json.loads(contents)\n","print(type(numbers2))\n","print(numbers2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"255mSTaRGT1i","executionInfo":{"status":"ok","timestamp":1727275387543,"user_tz":-420,"elapsed":361,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"ba06daa2-2855-4a4d-a535-9aa78b666a8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'list'>\n","[2, 3, 5, 7, 11, 13]\n"]}]},{"cell_type":"code","source":["#Generating Data\n","\n","#Random Walks\n","#Creating the RandomWalk Class\n","from random import choice\n","class RandomWalk:\n","  #A class to generate random walks.\n","  def __init__(self, num_points=5000):\n","  #Initialize attributes of a walk.\n","    self.num_points = num_points\n","    # All walks start at (0, 0).\n","    self.x_values = [0]\n","    self.y_values = [0]\n","  #Choosing Directions\n","  def fill_walk(self):\n","  #Calculate all the points in the walk.\n","    while len(self.x_values) < self.num_points:\n","    #Keep taking steps until the walk reaches the desired length.\n","      x_direction = choice([1, -1])\n","      x_distance = choice([0, 1, 2, 3, 4])\n","      x_step = x_direction * x_distance\n","\n","      y_direction = choice([1, -1])\n","      y_distance = choice([0, 1, 2, 3, 4])\n","      y_step = y_direction * y_distance\n","\n","      # Calculate the new position.\n","      x = self.x_values[-1] + x_step\n","      y = self.y_values[-1] + y_step\n","\n","      self.x_values.append(x)\n","      self.y_values.append(y)"],"metadata":{"id":"bgUnOKB0JeXs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Plotting the Random Walk\n","import matplotlib.pyplot as plt\n","rw = RandomWalk()\n","rw.fill_walk()\n","#Plot the points in the walk.\n","plt.style.use('classic')\n","fig, ax = plt.subplots()\n","ax.scatter(rw.x_values, rw.y_values, s=15)\n","ax.set_aspect('equal')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":440},"id":"QuA5dusWLXwo","executionInfo":{"status":"ok","timestamp":1727275616627,"user_tz":-420,"elapsed":775,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"e3e2485b-7944-4218-fbfa-ce88726fc09b"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Rolling a dice\n","from random import randint\n","class Die:\n","  #A class representing a single die.\n","  def __init__(self, num_sides=6):\n","  #Assume a six-sided die.\n","    self.num_sides = num_sides\n","  def roll(self):\n","  #Return a random value between 1 and number of sides.\n","    return randint(1, self.num_sides)\n","\n","#Roll the die\n","die = Die()\n","results = []\n","for roll_num in range(10000):\n","  result = die.roll()\n","  results.append(result)\n","print(results)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A4Ft0lbEPBrT","executionInfo":{"status":"ok","timestamp":1727275772134,"user_tz":-420,"elapsed":408,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"802833d5-8e3e-4667-d399-8861d843a31d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 5, 2, 2, 5, 6, 1, 4, 4, 1, 6, 6, 4, 1, 2, 2, 5, 5, 6, 2, 6, 1, 6, 3, 6, 2, 2, 1, 1, 5, 1, 3, 6, 2, 6, 2, 4, 1, 5, 1, 1, 2, 4, 3, 1, 1, 3, 3, 6, 3, 5, 1, 2, 1, 6, 4, 6, 6, 6, 4, 2, 4, 3, 6, 5, 5, 5, 2, 1, 3, 1, 6, 6, 6, 1, 3, 6, 5, 3, 4, 4, 2, 4, 1, 3, 2, 3, 2, 4, 4, 3, 5, 6, 2, 2, 2, 6, 2, 3, 6, 1, 3, 1, 4, 5, 5, 6, 2, 6, 6, 6, 2, 3, 4, 6, 6, 3, 1, 2, 2, 3, 6, 6, 2, 5, 3, 6, 1, 4, 4, 6, 4, 4, 2, 5, 3, 5, 4, 1, 6, 2, 2, 1, 3, 5, 1, 5, 5, 6, 4, 4, 4, 6, 2, 5, 3, 1, 5, 1, 3, 1, 2, 6, 5, 6, 6, 6, 1, 5, 1, 1, 2, 3, 5, 6, 3, 4, 5, 4, 5, 5, 1, 1, 5, 5, 4, 2, 6, 6, 6, 1, 3, 1, 4, 3, 4, 1, 5, 2, 5, 4, 6, 5, 2, 2, 1, 1, 1, 4, 6, 4, 3, 5, 2, 3, 1, 1, 1, 3, 5, 6, 3, 5, 1, 6, 6, 1, 3, 2, 6, 4, 3, 3, 4, 4, 3, 4, 3, 2, 2, 2, 1, 1, 1, 2, 4, 5, 2, 6, 3, 4, 1, 1, 5, 4, 3, 2, 2, 6, 6, 3, 3, 4, 2, 3, 1, 5, 5, 2, 2, 6, 6, 2, 5, 4, 5, 1, 6, 1, 4, 2, 5, 3, 4, 1, 4, 3, 6, 4, 2, 1, 6, 1, 6, 5, 5, 3, 5, 2, 3, 2, 3, 5, 1, 6, 6, 6, 6, 2, 3, 1, 5, 6, 3, 4, 5, 6, 4, 5, 2, 1, 3, 6, 2, 1, 2, 2, 2, 3, 3, 2, 1, 2, 3, 1, 2, 3, 1, 5, 2, 1, 3, 3, 1, 1, 3, 5, 2, 3, 6, 5, 6, 5, 5, 6, 4, 3, 5, 1, 4, 3, 6, 5, 5, 5, 3, 2, 3, 6, 5, 1, 5, 4, 6, 6, 3, 4, 5, 6, 2, 2, 3, 3, 2, 5, 6, 4, 4, 1, 3, 5, 5, 3, 2, 1, 2, 6, 1, 2, 5, 4, 4, 1, 4, 2, 4, 1, 3, 6, 6, 3, 3, 3, 1, 3, 3, 5, 3, 1, 4, 4, 4, 1, 3, 4, 3, 6, 1, 4, 2, 2, 2, 4, 1, 1, 5, 1, 6, 5, 6, 3, 1, 2, 2, 6, 5, 3, 6, 3, 5, 4, 6, 2, 5, 3, 2, 6, 2, 5, 4, 5, 3, 1, 4, 6, 5, 4, 6, 2, 6, 3, 6, 6, 2, 4, 1, 2, 3, 3, 2, 4, 1, 1, 4, 5, 5, 4, 3, 4, 6, 4, 6, 6, 5, 2, 5, 4, 2, 4, 5, 5, 5, 1, 3, 5, 5, 3, 2, 4, 2, 4, 2, 3, 2, 6, 2, 3, 4, 6, 1, 3, 5, 2, 3, 6, 5, 3, 2, 1, 5, 2, 6, 6, 1, 4, 4, 5, 3, 5, 3, 6, 4, 1, 2, 4, 6, 5, 2, 2, 1, 5, 5, 4, 6, 1, 5, 6, 3, 1, 6, 1, 3, 5, 4, 5, 4, 1, 6, 4, 3, 5, 2, 2, 3, 6, 5, 3, 4, 5, 5, 4, 6, 1, 2, 5, 2, 5, 3, 3, 4, 2, 1, 6, 2, 6, 3, 6, 1, 1, 6, 2, 5, 5, 4, 1, 3, 3, 2, 4, 4, 1, 1, 5, 5, 3, 6, 2, 3, 6, 2, 6, 4, 4, 2, 1, 5, 6, 3, 1, 6, 6, 6, 1, 3, 5, 2, 1, 5, 4, 6, 6, 4, 1, 3, 2, 1, 4, 6, 6, 1, 4, 3, 3, 5, 6, 6, 1, 2, 3, 1, 4, 4, 6, 4, 3, 2, 3, 4, 2, 3, 5, 3, 3, 1, 4, 4, 5, 4, 4, 4, 6, 5, 3, 6, 2, 6, 6, 4, 2, 3, 6, 6, 1, 5, 2, 6, 6, 6, 4, 6, 2, 6, 1, 4, 4, 3, 5, 1, 5, 3, 2, 2, 1, 4, 2, 5, 4, 5, 4, 2, 4, 4, 1, 4, 5, 4, 5, 2, 1, 2, 2, 4, 4, 2, 2, 6, 2, 2, 3, 5, 2, 1, 3, 1, 1, 1, 1, 3, 5, 2, 2, 4, 1, 5, 6, 3, 5, 2, 2, 4, 6, 4, 2, 1, 3, 2, 5, 1, 1, 3, 6, 3, 2, 2, 2, 4, 3, 1, 4, 3, 1, 4, 4, 5, 2, 4, 5, 1, 2, 4, 3, 1, 3, 1, 3, 3, 5, 3, 6, 1, 3, 2, 5, 1, 3, 1, 2, 1, 4, 6, 2, 5, 6, 4, 4, 1, 6, 5, 5, 4, 1, 1, 2, 1, 4, 2, 3, 4, 5, 2, 4, 1, 2, 1, 5, 2, 4, 6, 6, 2, 2, 4, 2, 2, 6, 5, 6, 3, 4, 3, 2, 2, 4, 2, 5, 6, 3, 6, 5, 6, 3, 2, 1, 4, 2, 2, 1, 2, 3, 2, 3, 1, 3, 3, 2, 3, 1, 4, 5, 3, 2, 4, 5, 4, 4, 1, 4, 2, 1, 3, 1, 5, 5, 1, 3, 3, 2, 4, 5, 1, 2, 5, 6, 3, 2, 4, 3, 6, 2, 6, 4, 4, 5, 4, 1, 4, 4, 4, 2, 1, 2, 6, 3, 5, 6, 6, 4, 6, 2, 3, 1, 2, 6, 3, 2, 5, 6, 3, 5, 6, 3, 1, 2, 4, 5, 6, 1, 4, 5, 3, 2, 1, 4, 2, 1, 3, 6, 1, 2, 1, 6, 2, 1, 4, 1, 3, 2, 5, 1, 6, 1, 4, 6, 3, 5, 4, 2, 1, 5, 5, 5, 2, 4, 2, 2, 2, 1, 3, 2, 6, 4, 4, 2, 5, 5, 5, 6, 2, 5, 4, 3, 1, 1, 5, 4, 3, 6, 6, 2, 5, 1, 1, 1, 6, 4, 3, 5, 6, 1, 5, 2, 5, 5, 3, 2, 4, 3, 4, 3, 1, 4, 3, 6, 4, 3, 1, 2, 6, 1, 2, 4, 6, 4, 1, 6, 3, 4, 2, 2, 2, 4, 1, 4, 5, 6, 1, 6, 5, 6, 4, 2, 4, 1, 3, 1, 1, 3, 1, 5, 3, 3, 2, 4, 5, 4, 6, 2, 5, 1, 1, 3, 4, 5, 1, 3, 2, 6, 3, 1, 2, 3, 1, 5, 1, 1, 2, 6, 5, 2, 6, 1, 1, 1, 6, 1, 1, 4, 5, 2, 4, 5, 4, 5, 3, 3, 2, 2, 6, 6, 3, 6, 5, 1, 6, 5, 6, 1, 3, 3, 4, 3, 4, 2, 3, 3, 6, 5, 4, 4, 5, 6, 6, 5, 6, 1, 4, 4, 3, 1, 6, 2, 5, 6, 4, 2, 4, 3, 4, 2, 3, 1, 2, 6, 1, 5, 3, 2, 2, 2, 6, 6, 5, 4, 5, 2, 5, 4, 6, 1, 6, 3, 2, 5, 2, 1, 3, 2, 4, 2, 1, 2, 6, 2, 2, 1, 2, 1, 2, 6, 6, 6, 3, 1, 1, 3, 2, 2, 2, 3, 3, 1, 5, 4, 2, 5, 3, 4, 6, 4, 4, 6, 3, 4, 5, 3, 3, 6, 1, 5, 5, 5, 1, 2, 4, 6, 1, 6, 3, 4, 3, 3, 3, 6, 2, 6, 5, 6, 2, 2, 6, 1, 6, 2, 4, 2, 5, 1, 3, 4, 6, 4, 6, 1, 1, 4, 1, 4, 5, 3, 5, 5, 3, 2, 1, 3, 1, 3, 2, 2, 5, 5, 6, 4, 3, 1, 4, 2, 5, 2, 1, 6, 6, 4, 5, 1, 3, 5, 1, 4, 5, 2, 1, 1, 6, 6, 5, 1, 5, 6, 6, 4, 5, 3, 6, 5, 1, 3, 6, 3, 4, 4, 6, 5, 6, 2, 3, 4, 2, 6, 1, 4, 1, 3, 6, 1, 3, 4, 6, 1, 3, 3, 3, 4, 3, 1, 2, 6, 2, 1, 3, 6, 5, 5, 4, 5, 3, 3, 3, 5, 6, 5, 1, 4, 3, 5, 2, 6, 1, 1, 2, 4, 4, 4, 4, 1, 4, 5, 5, 5, 2, 6, 3, 6, 3, 6, 2, 1, 5, 1, 5, 3, 4, 2, 2, 4, 6, 1, 4, 4, 4, 3, 4, 4, 6, 3, 4, 1, 2, 1, 3, 6, 1, 1, 6, 3, 2, 2, 1, 2, 5, 5, 1, 6, 4, 4, 1, 4, 4, 5, 5, 1, 3, 3, 2, 2, 5, 1, 6, 2, 6, 4, 6, 3, 2, 5, 6, 1, 6, 5, 3, 5, 5, 3, 4, 3, 6, 3, 3, 1, 4, 3, 6, 6, 2, 2, 2, 3, 3, 6, 3, 1, 4, 1, 4, 3, 1, 6, 3, 1, 2, 6, 2, 1, 5, 3, 4, 6, 1, 1, 3, 6, 6, 4, 2, 3, 6, 4, 6, 6, 2, 1, 2, 1, 3, 1, 4, 1, 6, 6, 4, 3, 3, 1, 6, 6, 5, 5, 4, 6, 1, 2, 1, 2, 3, 4, 2, 1, 5, 5, 3, 4, 1, 6, 6, 1, 2, 1, 4, 1, 3, 6, 3, 4, 1, 5, 3, 1, 2, 6, 3, 1, 5, 2, 4, 4, 2, 5, 2, 1, 3, 5, 6, 5, 2, 2, 3, 6, 5, 1, 4, 1, 5, 5, 5, 6, 6, 4, 3, 4, 4, 4, 1, 4, 2, 1, 1, 1, 6, 3, 4, 5, 6, 2, 5, 1, 5, 4, 5, 1, 4, 4, 5, 4, 2, 5, 3, 6, 3, 4, 4, 4, 3, 2, 5, 1, 3, 6, 2, 4, 4, 5, 5, 1, 6, 3, 2, 2, 5, 1, 2, 1, 2, 6, 4, 5, 6, 5, 2, 5, 3, 3, 4, 6, 4, 3, 3, 3, 1, 2, 6, 5, 1, 3, 2, 5, 1, 4, 3, 3, 1, 3, 4, 3, 3, 5, 4, 4, 3, 1, 2, 4, 6, 3, 6, 6, 1, 6, 4, 2, 1, 3, 6, 3, 1, 5, 3, 4, 6, 4, 4, 3, 3, 5, 3, 2, 1, 3, 6, 5, 3, 4, 1, 4, 4, 5, 3, 3, 3, 3, 4, 5, 5, 2, 6, 3, 3, 3, 4, 3, 6, 6, 1, 4, 5, 3, 4, 5, 3, 3, 5, 3, 3, 5, 5, 2, 2, 3, 5, 1, 3, 2, 2, 3, 2, 4, 4, 6, 6, 5, 4, 6, 4, 1, 1, 1, 2, 1, 2, 3, 1, 5, 5, 1, 5, 3, 6, 3, 3, 2, 1, 1, 5, 4, 2, 6, 1, 2, 5, 5, 5, 2, 1, 1, 3, 2, 6, 1, 6, 3, 2, 1, 2, 5, 1, 2, 1, 6, 3, 4, 3, 2, 3, 3, 3, 2, 3, 5, 5, 6, 2, 5, 3, 6, 2, 5, 1, 1, 6, 1, 5, 2, 3, 3, 5, 2, 5, 1, 1, 3, 1, 1, 3, 5, 6, 2, 3, 4, 3, 5, 1, 5, 2, 2, 2, 2, 5, 6, 6, 1, 3, 4, 5, 4, 1, 1, 1, 3, 5, 6, 6, 3, 6, 5, 1, 6, 5, 4, 6, 6, 2, 2, 3, 5, 2, 2, 4, 1, 4, 4, 3, 4, 4, 3, 5, 1, 4, 6, 1, 3, 1, 4, 5, 6, 2, 4, 6, 2, 3, 6, 4, 2, 6, 2, 6, 4, 1, 6, 2, 3, 6, 1, 5, 4, 6, 3, 1, 6, 2, 6, 6, 1, 6, 2, 4, 4, 6, 4, 2, 2, 6, 5, 3, 6, 2, 3, 1, 2, 1, 5, 4, 1, 3, 6, 6, 5, 1, 2, 2, 2, 2, 4, 6, 2, 1, 1, 2, 5, 6, 1, 4, 1, 5, 2, 1, 4, 3, 3, 1, 6, 4, 6, 2, 2, 1, 1, 5, 4, 5, 5, 4, 6, 2, 1, 5, 4, 1, 2, 3, 2, 6, 3, 4, 3, 2, 3, 2, 5, 1, 4, 1, 5, 5, 6, 2, 6, 5, 1, 4, 5, 6, 5, 5, 4, 6, 3, 2, 1, 4, 1, 2, 2, 3, 1, 1, 2, 6, 1, 2, 5, 1, 6, 6, 3, 4, 6, 5, 6, 6, 1, 4, 2, 1, 3, 5, 1, 3, 6, 3, 6, 4, 3, 2, 1, 5, 2, 3, 6, 5, 6, 6, 3, 5, 4, 6, 1, 5, 4, 4, 4, 2, 2, 1, 3, 1, 5, 5, 4, 3, 2, 2, 4, 2, 4, 5, 1, 6, 6, 3, 5, 5, 4, 4, 2, 3, 3, 3, 4, 6, 6, 6, 1, 1, 1, 4, 1, 1, 2, 1, 6, 5, 2, 2, 5, 4, 1, 3, 4, 2, 1, 1, 5, 1, 5, 6, 4, 5, 1, 5, 4, 5, 2, 2, 4, 1, 4, 2, 4, 5, 1, 3, 5, 4, 1, 1, 1, 3, 1, 6, 4, 4, 5, 2, 2, 4, 3, 6, 6, 2, 4, 6, 5, 1, 3, 5, 6, 1, 4, 5, 4, 4, 2, 6, 4, 5, 4, 2, 2, 4, 2, 4, 3, 5, 5, 1, 1, 5, 2, 3, 5, 3, 6, 5, 2, 1, 1, 1, 1, 2, 3, 5, 1, 1, 6, 6, 3, 4, 2, 5, 2, 3, 3, 6, 2, 4, 5, 3, 2, 4, 5, 3, 4, 5, 1, 5, 4, 5, 1, 6, 2, 4, 4, 6, 1, 5, 6, 5, 5, 1, 4, 1, 6, 1, 2, 1, 3, 2, 2, 4, 3, 5, 4, 4, 1, 5, 5, 4, 2, 2, 2, 4, 4, 5, 6, 6, 6, 1, 5, 1, 2, 4, 4, 4, 6, 4, 2, 3, 4, 1, 4, 4, 1, 3, 3, 4, 6, 1, 5, 5, 6, 6, 4, 1, 5, 1, 2, 6, 1, 3, 2, 3, 4, 4, 4, 1, 4, 6, 4, 6, 2, 4, 5, 1, 6, 6, 3, 1, 5, 4, 2, 2, 1, 5, 2, 1, 1, 5, 4, 6, 1, 3, 5, 2, 4, 5, 1, 3, 5, 1, 1, 5, 4, 2, 3, 5, 5, 4, 1, 5, 1, 1, 6, 1, 3, 3, 6, 6, 4, 5, 4, 3, 1, 6, 5, 2, 1, 6, 4, 5, 2, 2, 6, 2, 3, 2, 4, 2, 2, 6, 4, 4, 2, 6, 1, 1, 1, 3, 3, 6, 2, 5, 5, 1, 5, 1, 2, 3, 2, 3, 1, 2, 5, 5, 2, 2, 4, 6, 5, 2, 4, 1, 3, 1, 4, 6, 1, 5, 6, 1, 6, 4, 5, 5, 6, 5, 1, 6, 4, 1, 2, 1, 4, 3, 5, 2, 4, 1, 3, 1, 3, 4, 6, 4, 2, 5, 5, 1, 3, 1, 1, 3, 2, 1, 3, 1, 1, 4, 2, 2, 2, 2, 5, 4, 2, 6, 1, 1, 1, 6, 3, 5, 6, 1, 6, 4, 2, 3, 4, 2, 2, 3, 6, 6, 3, 2, 3, 2, 4, 5, 2, 3, 4, 5, 2, 2, 5, 4, 6, 6, 1, 5, 5, 6, 5, 1, 1, 3, 4, 6, 4, 6, 6, 2, 3, 5, 3, 2, 4, 5, 2, 1, 3, 5, 2, 6, 3, 5, 1, 6, 6, 6, 2, 3, 6, 6, 1, 2, 5, 1, 2, 4, 3, 1, 6, 5, 1, 4, 5, 4, 3, 4, 6, 2, 4, 5, 1, 4, 4, 5, 3, 4, 1, 5, 6, 3, 2, 3, 2, 2, 3, 3, 4, 6, 4, 6, 5, 1, 4, 2, 5, 2, 6, 4, 6, 3, 4, 6, 3, 4, 1, 2, 3, 6, 2, 6, 1, 3, 3, 5, 1, 2, 3, 3, 1, 5, 6, 3, 4, 6, 4, 4, 1, 5, 1, 5, 4, 2, 2, 1, 3, 3, 2, 2, 4, 5, 1, 4, 5, 1, 5, 1, 2, 3, 2, 3, 5, 5, 6, 2, 4, 6, 2, 5, 1, 2, 4, 4, 6, 3, 6, 6, 6, 6, 4, 2, 2, 6, 3, 3, 5, 1, 3, 1, 6, 4, 5, 2, 4, 3, 3, 5, 3, 4, 2, 4, 1, 1, 4, 6, 5, 6, 6, 4, 5, 2, 4, 2, 2, 5, 4, 6, 4, 6, 1, 4, 2, 3, 2, 4, 3, 2, 6, 3, 3, 5, 3, 1, 5, 4, 2, 1, 1, 1, 2, 6, 3, 1, 5, 6, 5, 6, 2, 4, 5, 6, 6, 4, 6, 6, 5, 3, 6, 5, 3, 2, 3, 3, 5, 1, 2, 5, 5, 6, 6, 2, 3, 6, 4, 6, 6, 5, 5, 2, 4, 2, 2, 5, 2, 5, 2, 3, 4, 4, 5, 3, 5, 2, 1, 2, 4, 4, 3, 1, 2, 3, 5, 3, 3, 2, 6, 3, 6, 6, 4, 1, 3, 4, 3, 5, 6, 2, 2, 2, 6, 6, 5, 6, 2, 5, 4, 2, 3, 5, 2, 5, 4, 3, 1, 6, 4, 3, 1, 1, 4, 5, 1, 4, 4, 2, 5, 3, 1, 4, 6, 1, 2, 6, 5, 2, 6, 3, 1, 5, 5, 5, 5, 6, 2, 3, 2, 3, 3, 5, 6, 5, 1, 6, 4, 4, 2, 2, 4, 5, 4, 4, 2, 5, 1, 2, 6, 4, 5, 1, 4, 5, 5, 1, 2, 1, 3, 1, 4, 2, 1, 3, 6, 2, 1, 2, 4, 3, 5, 5, 4, 4, 5, 4, 3, 1, 4, 4, 2, 1, 6, 1, 1, 5, 6, 2, 3, 6, 2, 1, 6, 2, 3, 1, 4, 1, 3, 6, 5, 1, 5, 4, 1, 6, 2, 1, 6, 3, 1, 6, 2, 6, 1, 5, 4, 3, 6, 5, 4, 3, 4, 2, 3, 2, 1, 3, 6, 6, 4, 2, 3, 2, 5, 3, 3, 2, 2, 2, 6, 1, 2, 2, 1, 1, 6, 1, 5, 5, 6, 2, 3, 5, 3, 5, 2, 1, 1, 3, 4, 2, 4, 1, 3, 6, 2, 5, 6, 3, 4, 6, 2, 4, 1, 3, 1, 3, 5, 1, 1, 1, 4, 6, 3, 4, 2, 4, 5, 2, 5, 3, 6, 4, 2, 1, 2, 4, 2, 3, 1, 1, 2, 2, 2, 2, 6, 6, 3, 5, 3, 6, 1, 5, 2, 2, 4, 4, 4, 1, 5, 6, 4, 5, 5, 2, 4, 5, 1, 1, 3, 1, 6, 6, 2, 3, 5, 5, 4, 3, 2, 5, 1, 1, 1, 4, 5, 5, 5, 1, 3, 6, 5, 2, 2, 6, 5, 3, 6, 1, 6, 3, 2, 2, 3, 5, 1, 6, 6, 5, 4, 4, 2, 1, 1, 2, 6, 3, 2, 3, 2, 3, 5, 6, 2, 2, 2, 2, 6, 6, 5, 5, 4, 4, 5, 5, 5, 5, 4, 6, 4, 6, 2, 1, 5, 5, 6, 2, 3, 6, 3, 3, 4, 5, 3, 6, 1, 5, 3, 6, 5, 6, 2, 4, 4, 3, 4, 6, 4, 3, 2, 2, 2, 1, 3, 1, 5, 3, 2, 2, 6, 4, 1, 4, 4, 4, 3, 4, 1, 2, 6, 2, 6, 4, 6, 3, 5, 4, 1, 5, 1, 2, 5, 4, 5, 3, 2, 1, 4, 4, 4, 6, 4, 6, 4, 2, 1, 4, 2, 1, 1, 3, 5, 3, 4, 3, 3, 1, 1, 2, 2, 1, 4, 6, 5, 1, 1, 5, 5, 4, 2, 4, 6, 5, 3, 5, 3, 3, 4, 3, 6, 6, 5, 5, 1, 1, 4, 2, 1, 2, 1, 4, 2, 3, 4, 4, 1, 5, 3, 3, 2, 2, 4, 3, 3, 3, 5, 1, 2, 6, 4, 1, 6, 5, 1, 5, 4, 4, 4, 6, 2, 4, 4, 3, 4, 6, 3, 5, 3, 4, 2, 6, 3, 3, 5, 6, 6, 3, 5, 3, 1, 5, 5, 2, 4, 2, 2, 3, 3, 6, 4, 3, 2, 2, 4, 4, 1, 3, 3, 2, 1, 5, 6, 4, 3, 4, 1, 1, 5, 4, 4, 5, 6, 3, 2, 1, 4, 6, 5, 3, 2, 5, 1, 2, 1, 4, 1, 6, 3, 1, 6, 3, 3, 1, 2, 1, 3, 3, 3, 3, 5, 2, 3, 1, 1, 2, 4, 6, 4, 2, 2, 5, 2, 2, 2, 5, 2, 2, 5, 4, 5, 5, 6, 3, 5, 6, 4, 3, 1, 6, 4, 6, 1, 3, 3, 2, 4, 2, 3, 1, 5, 6, 5, 4, 5, 2, 4, 3, 4, 4, 4, 4, 5, 5, 5, 4, 4, 5, 4, 5, 5, 4, 2, 5, 3, 3, 2, 6, 2, 1, 6, 3, 6, 3, 3, 1, 4, 3, 1, 4, 4, 2, 6, 6, 3, 1, 3, 4, 1, 2, 4, 6, 6, 5, 3, 3, 3, 5, 2, 1, 1, 3, 5, 6, 1, 1, 4, 1, 3, 1, 2, 1, 6, 2, 6, 4, 4, 1, 2, 4, 6, 4, 6, 3, 2, 6, 2, 4, 2, 4, 3, 1, 5, 3, 4, 5, 3, 6, 5, 1, 2, 1, 6, 3, 3, 6, 6, 1, 6, 4, 5, 5, 4, 3, 5, 4, 3, 6, 5, 2, 1, 4, 4, 5, 2, 3, 5, 1, 3, 5, 3, 4, 5, 4, 2, 1, 4, 3, 2, 4, 4, 5, 5, 5, 1, 3, 4, 4, 6, 3, 5, 5, 2, 6, 5, 6, 4, 6, 3, 3, 4, 6, 6, 2, 1, 6, 3, 3, 4, 6, 4, 2, 2, 6, 2, 1, 4, 6, 3, 2, 6, 4, 1, 1, 3, 5, 2, 2, 5, 4, 6, 3, 6, 3, 6, 6, 2, 3, 5, 1, 4, 3, 2, 6, 5, 6, 4, 5, 3, 3, 3, 2, 3, 1, 6, 6, 2, 5, 1, 1, 1, 2, 4, 3, 3, 5, 1, 4, 2, 3, 4, 1, 2, 2, 3, 2, 5, 6, 3, 3, 6, 6, 4, 2, 6, 6, 4, 2, 6, 4, 5, 2, 6, 3, 1, 4, 3, 6, 4, 1, 4, 3, 3, 2, 5, 6, 3, 4, 5, 3, 2, 1, 4, 2, 1, 6, 1, 4, 4, 1, 3, 1, 5, 3, 3, 5, 2, 1, 6, 1, 3, 3, 4, 3, 2, 1, 1, 1, 4, 3, 2, 3, 4, 5, 6, 2, 2, 6, 4, 6, 5, 6, 3, 2, 3, 3, 2, 2, 5, 4, 4, 2, 1, 6, 1, 2, 5, 4, 4, 5, 6, 2, 4, 5, 2, 2, 6, 1, 1, 5, 4, 1, 4, 1, 3, 4, 6, 4, 3, 3, 1, 1, 3, 4, 4, 1, 5, 3, 4, 6, 4, 1, 5, 3, 4, 2, 5, 3, 2, 2, 3, 1, 1, 4, 2, 4, 4, 3, 5, 5, 5, 5, 2, 3, 6, 6, 6, 6, 6, 6, 4, 2, 1, 2, 4, 5, 1, 1, 6, 1, 2, 3, 4, 1, 6, 5, 1, 1, 3, 3, 2, 2, 4, 6, 6, 2, 4, 3, 6, 5, 1, 6, 1, 3, 5, 4, 4, 6, 1, 5, 1, 1, 3, 1, 6, 4, 2, 4, 2, 4, 3, 2, 3, 1, 1, 3, 1, 6, 3, 6, 2, 5, 4, 2, 5, 5, 1, 5, 1, 4, 1, 6, 4, 2, 5, 4, 2, 2, 5, 2, 5, 4, 6, 3, 6, 6, 5, 3, 6, 4, 4, 3, 6, 4, 1, 6, 1, 2, 4, 2, 1, 3, 5, 4, 3, 2, 5, 4, 6, 1, 1, 1, 6, 1, 4, 6, 4, 1, 1, 6, 3, 3, 5, 3, 2, 5, 4, 2, 6, 6, 5, 4, 3, 4, 5, 5, 3, 3, 6, 3, 1, 5, 1, 5, 1, 1, 4, 2, 4, 4, 2, 2, 4, 3, 5, 4, 3, 5, 4, 6, 4, 4, 3, 6, 5, 6, 1, 5, 6, 5, 4, 6, 3, 6, 2, 3, 2, 2, 3, 5, 6, 6, 4, 6, 6, 2, 2, 4, 6, 3, 3, 1, 1, 6, 6, 6, 2, 6, 5, 4, 1, 2, 4, 1, 6, 6, 1, 2, 3, 5, 4, 2, 6, 1, 1, 4, 5, 4, 5, 2, 5, 5, 1, 6, 3, 1, 4, 2, 6, 4, 6, 4, 3, 3, 3, 2, 3, 6, 2, 2, 1, 1, 1, 2, 5, 3, 1, 6, 3, 6, 3, 4, 2, 6, 3, 2, 5, 1, 1, 5, 4, 3, 3, 4, 1, 5, 1, 2, 2, 3, 6, 6, 2, 6, 3, 6, 4, 5, 3, 6, 5, 2, 3, 6, 3, 6, 1, 1, 2, 5, 3, 5, 6, 5, 3, 3, 1, 6, 4, 6, 5, 4, 1, 1, 5, 1, 5, 5, 4, 3, 2, 5, 6, 5, 1, 2, 1, 3, 3, 4, 3, 2, 3, 6, 1, 3, 3, 2, 3, 3, 1, 5, 1, 4, 5, 3, 1, 5, 3, 1, 6, 4, 4, 2, 6, 3, 1, 4, 2, 3, 5, 3, 4, 3, 6, 5, 1, 3, 1, 1, 3, 5, 5, 4, 5, 6, 2, 4, 6, 6, 2, 3, 6, 6, 3, 5, 6, 1, 2, 6, 4, 6, 5, 6, 1, 4, 2, 5, 2, 6, 5, 4, 6, 3, 6, 2, 4, 3, 1, 4, 4, 1, 4, 3, 3, 1, 1, 6, 2, 4, 1, 4, 4, 6, 1, 5, 4, 6, 2, 1, 5, 2, 5, 5, 2, 3, 1, 3, 2, 4, 1, 6, 2, 4, 4, 3, 1, 5, 5, 4, 2, 2, 6, 2, 4, 5, 6, 1, 4, 5, 2, 5, 2, 4, 2, 2, 1, 4, 4, 2, 1, 6, 1, 4, 3, 6, 3, 4, 2, 5, 5, 6, 6, 1, 5, 4, 1, 4, 5, 2, 6, 6, 1, 1, 2, 2, 6, 4, 1, 2, 6, 1, 3, 3, 3, 6, 3, 3, 1, 5, 2, 4, 5, 1, 3, 2, 3, 6, 4, 4, 4, 2, 5, 6, 1, 2, 6, 2, 2, 6, 6, 5, 1, 1, 1, 4, 2, 5, 6, 4, 3, 1, 5, 1, 5, 3, 2, 1, 3, 6, 4, 1, 3, 3, 1, 2, 6, 6, 3, 3, 6, 6, 4, 2, 4, 3, 3, 4, 4, 4, 6, 6, 5, 6, 5, 4, 2, 1, 4, 2, 1, 6, 3, 1, 6, 5, 6, 5, 3, 3, 5, 2, 1, 1, 1, 3, 3, 1, 1, 3, 3, 4, 3, 3, 1, 3, 6, 1, 3, 6, 3, 2, 2, 1, 3, 5, 1, 4, 2, 3, 3, 1, 2, 3, 4, 6, 6, 6, 4, 5, 6, 3, 4, 1, 3, 4, 1, 4, 6, 6, 1, 2, 2, 3, 5, 4, 1, 4, 4, 3, 3, 1, 3, 1, 2, 1, 6, 2, 3, 4, 6, 3, 1, 6, 6, 3, 3, 2, 3, 5, 2, 3, 4, 1, 3, 1, 1, 1, 5, 3, 2, 1, 5, 6, 3, 4, 1, 2, 1, 2, 3, 2, 5, 6, 4, 3, 5, 1, 2, 2, 3, 4, 4, 4, 1, 1, 3, 5, 3, 1, 4, 3, 4, 2, 4, 3, 2, 3, 1, 6, 5, 2, 4, 2, 4, 4, 4, 2, 1, 4, 6, 6, 6, 4, 2, 1, 6, 1, 3, 2, 3, 4, 2, 1, 4, 4, 6, 4, 4, 4, 1, 6, 5, 4, 4, 1, 6, 2, 3, 3, 3, 2, 6, 6, 6, 4, 6, 3, 4, 1, 3, 1, 1, 2, 6, 2, 5, 4, 4, 4, 2, 1, 6, 6, 6, 1, 6, 1, 6, 1, 1, 2, 6, 5, 2, 3, 5, 1, 6, 4, 4, 3, 6, 5, 1, 1, 6, 2, 1, 5, 6, 6, 6, 6, 6, 1, 1, 6, 2, 3, 3, 1, 2, 1, 2, 2, 3, 2, 5, 1, 3, 6, 5, 6, 6, 3, 1, 3, 1, 4, 3, 5, 3, 6, 4, 4, 3, 3, 1, 6, 6, 3, 2, 3, 3, 6, 5, 5, 6, 3, 4, 6, 4, 4, 2, 3, 6, 4, 3, 4, 1, 3, 4, 1, 5, 6, 3, 6, 1, 4, 2, 5, 3, 1, 3, 3, 6, 5, 3, 6, 4, 6, 4, 5, 2, 6, 5, 3, 1, 2, 1, 1, 3, 2, 4, 3, 3, 1, 6, 6, 6, 6, 4, 4, 6, 2, 4, 6, 2, 6, 2, 5, 5, 3, 2, 6, 3, 1, 2, 2, 1, 1, 5, 1, 6, 2, 4, 1, 2, 3, 2, 5, 6, 1, 4, 1, 4, 4, 1, 6, 3, 3, 4, 6, 2, 6, 3, 6, 4, 5, 4, 2, 2, 3, 3, 1, 5, 1, 5, 1, 5, 5, 1, 4, 2, 4, 6, 5, 3, 5, 3, 6, 5, 6, 5, 6, 6, 2, 3, 2, 1, 4, 5, 3, 2, 4, 6, 6, 2, 4, 3, 1, 4, 4, 2, 2, 1, 5, 4, 2, 6, 5, 1, 1, 4, 3, 6, 4, 6, 5, 1, 5, 3, 3, 3, 4, 6, 5, 5, 2, 3, 5, 3, 4, 2, 5, 4, 1, 5, 4, 2, 2, 5, 1, 3, 1, 4, 2, 4, 6, 5, 6, 2, 3, 4, 2, 1, 3, 3, 2, 3, 6, 5, 4, 2, 1, 3, 1, 6, 4, 5, 5, 6, 4, 1, 6, 4, 2, 4, 6, 6, 4, 4, 1, 5, 4, 1, 3, 2, 3, 6, 1, 3, 5, 6, 2, 3, 4, 4, 4, 3, 6, 4, 1, 5, 6, 1, 1, 1, 3, 2, 5, 2, 3, 4, 1, 1, 1, 4, 5, 4, 3, 4, 3, 3, 2, 3, 4, 2, 6, 1, 4, 6, 1, 2, 4, 4, 6, 3, 5, 5, 6, 3, 3, 5, 3, 4, 1, 3, 4, 4, 2, 2, 3, 4, 4, 5, 2, 3, 6, 6, 3, 6, 1, 2, 2, 1, 5, 5, 5, 3, 3, 5, 1, 2, 2, 4, 5, 3, 4, 4, 3, 4, 1, 3, 2, 4, 1, 5, 3, 4, 5, 2, 1, 1, 3, 1, 2, 4, 3, 5, 3, 3, 4, 3, 2, 3, 5, 4, 1, 5, 4, 4, 4, 6, 2, 3, 1, 3, 3, 1, 2, 5, 1, 3, 3, 6, 4, 5, 5, 4, 6, 2, 4, 5, 2, 3, 2, 1, 6, 3, 4, 4, 4, 3, 2, 6, 6, 4, 1, 3, 3, 5, 6, 6, 2, 2, 4, 4, 2, 6, 5, 4, 4, 3, 6, 2, 2, 6, 2, 4, 3, 4, 5, 4, 5, 3, 1, 1, 2, 5, 1, 5, 6, 6, 5, 2, 4, 1, 6, 6, 5, 6, 4, 5, 4, 3, 2, 4, 2, 5, 5, 5, 4, 1, 3, 1, 4, 6, 1, 2, 3, 4, 1, 2, 4, 2, 1, 3, 2, 4, 5, 4, 5, 1, 3, 6, 6, 5, 5, 2, 1, 2, 1, 5, 5, 1, 1, 1, 5, 5, 5, 1, 1, 3, 5, 1, 2, 6, 3, 6, 5, 5, 5, 1, 4, 1, 5, 1, 3, 1, 6, 1, 3, 3, 2, 4, 2, 3, 1, 5, 6, 2, 5, 4, 4, 3, 2, 2, 1, 6, 3, 5, 1, 4, 4, 4, 2, 4, 3, 5, 3, 5, 2, 4, 1, 3, 5, 6, 6, 3, 5, 4, 4, 3, 4, 5, 2, 3, 2, 6, 4, 1, 1, 2, 2, 2, 4, 1, 5, 5, 5, 3, 2, 6, 6, 3, 2, 5, 6, 1, 5, 1, 3, 3, 6, 5, 2, 1, 3, 1, 5, 1, 2, 4, 6, 6, 5, 4, 2, 6, 6, 5, 3, 5, 5, 6, 4, 3, 2, 4, 6, 1, 2, 4, 5, 4, 4, 5, 4, 5, 3, 1, 4, 6, 1, 1, 2, 6, 4, 5, 2, 1, 5, 2, 4, 1, 3, 5, 6, 2, 5, 5, 1, 5, 2, 4, 1, 1, 2, 5, 6, 1, 1, 3, 6, 2, 1, 4, 5, 2, 3, 4, 1, 3, 6, 1, 2, 4, 5, 3, 3, 3, 6, 2, 2, 2, 6, 1, 4, 4, 4, 3, 2, 1, 1, 1, 1, 5, 5, 3, 6, 4, 3, 1, 5, 5, 4, 4, 4, 5, 4, 6, 1, 1, 1, 4, 5, 5, 1, 4, 2, 4, 6, 6, 4, 5, 2, 2, 5, 5, 3, 3, 4, 5, 6, 5, 4, 2, 6, 2, 4, 1, 4, 3, 1, 3, 5, 3, 4, 1, 6, 1, 3, 5, 5, 2, 6, 5, 2, 1, 3, 1, 1, 6, 6, 2, 3, 1, 3, 3, 6, 4, 2, 1, 3, 5, 5, 6, 4, 1, 1, 4, 4, 1, 1, 5, 6, 5, 1, 3, 5, 3, 5, 1, 2, 2, 5, 1, 1, 6, 4, 5, 6, 6, 4, 3, 5, 2, 3, 2, 6, 4, 6, 2, 4, 3, 1, 6, 2, 1, 5, 2, 5, 5, 6, 4, 4, 1, 6, 3, 5, 5, 4, 6, 6, 3, 4, 2, 1, 6, 3, 4, 2, 5, 3, 5, 6, 5, 1, 2, 1, 6, 5, 4, 6, 3, 5, 1, 3, 2, 4, 4, 1, 5, 1, 3, 5, 3, 6, 6, 4, 3, 3, 6, 4, 4, 2, 5, 4, 6, 3, 4, 2, 2, 6, 2, 2, 1, 2, 1, 5, 3, 3, 5, 5, 2, 2, 1, 4, 3, 4, 1, 4, 2, 2, 5, 3, 5, 1, 6, 4, 5, 3, 6, 1, 6, 1, 5, 5, 2, 3, 1, 1, 6, 6, 1, 5, 2, 4, 3, 2, 5, 1, 4, 1, 2, 4, 4, 3, 5, 6, 5, 4, 5, 5, 2, 1, 3, 6, 5, 6, 6, 2, 6, 1, 3, 2, 2, 1, 2, 5, 6, 3, 1, 4, 2, 4, 6, 3, 6, 5, 6, 3, 5, 1, 2, 4, 4, 1, 1, 2, 2, 3, 5, 4, 6, 3, 6, 4, 1, 2, 2, 5, 2, 1, 2, 6, 4, 3, 1, 1, 3, 4, 6, 3, 1, 3, 4, 3, 2, 6, 2, 5, 1, 6, 4, 1, 2, 6, 3, 1, 5, 3, 2, 2, 6, 3, 1, 5, 2, 1, 5, 5, 4, 5, 3, 4, 1, 1, 5, 4, 1, 5, 6, 6, 2, 1, 3, 1, 1, 3, 4, 3, 1, 6, 1, 5, 5, 1, 4, 5, 1, 4, 4, 2, 1, 5, 2, 2, 1, 4, 3, 4, 6, 6, 2, 5, 6, 1, 3, 1, 3, 6, 2, 6, 4, 1, 4, 5, 1, 2, 4, 6, 6, 1, 3, 3, 4, 3, 6, 6, 6, 1, 6, 4, 3, 4, 6, 2, 5, 3, 6, 6, 3, 3, 1, 1, 5, 4, 2, 4, 2, 4, 3, 4, 6, 2, 5, 6, 1, 6, 5, 6, 3, 5, 1, 1, 6, 2, 3, 3, 3, 6, 2, 3, 1, 3, 4, 3, 4, 5, 2, 5, 2, 4, 3, 2, 3, 2, 1, 3, 2, 2, 6, 4, 4, 4, 3, 5, 1, 6, 4, 6, 4, 5, 6, 6, 6, 3, 4, 3, 6, 3, 5, 6, 1, 6, 4, 1, 2, 6, 2, 6, 3, 4, 4, 6, 1, 5, 2, 2, 4, 4, 6, 4, 1, 4, 3, 6, 1, 5, 1, 5, 4, 3, 1, 1, 6, 5, 2, 1, 4, 1, 3, 6, 2, 6, 5, 1, 4, 5, 4, 5, 1, 5, 6, 2, 4, 1, 2, 3, 6, 6, 1, 2, 2, 4, 4, 2, 1, 3, 4, 5, 4, 5, 6, 3, 3, 6, 3, 4, 1, 4, 3, 5, 2, 3, 5, 1, 6, 3, 5, 5, 2, 2, 5, 1, 6, 3, 5, 3, 4, 6, 5, 3, 2, 2, 1, 2, 6, 6, 2, 6, 5, 1, 4, 3, 6, 4, 5, 1, 1, 2, 4, 1, 1, 2, 3, 3, 3, 2, 2, 2, 4, 5, 3, 2, 6, 4, 4, 2, 5, 4, 3, 3, 3, 2, 1, 2, 1, 2, 4, 4, 2, 2, 3, 2, 2, 2, 1, 4, 3, 1, 6, 3, 4, 1, 2, 6, 1, 4, 2, 6, 1, 4, 6, 4, 1, 2, 2, 6, 4, 3, 5, 6, 6, 4, 3, 4, 6, 4, 4, 5, 6, 1, 6, 3, 6, 5, 4, 3, 5, 6, 3, 1, 3, 4, 6, 1, 1, 2, 6, 6, 3, 3, 3, 2, 5, 4, 5, 2, 5, 4, 3, 5, 6, 2, 5, 5, 3, 2, 3, 1, 1, 1, 6, 4, 5, 4, 2, 3, 1, 3, 4, 1, 1, 2, 1, 6, 5, 5, 5, 1, 5, 2, 5, 1, 2, 2, 2, 3, 4, 2, 1, 1, 5, 2, 2, 5, 6, 6, 3, 4, 3, 2, 6, 1, 1, 6, 1, 6, 2, 4, 5, 1, 1, 4, 3, 6, 2, 2, 5, 2, 1, 5, 4, 2, 1, 2, 1, 2, 6, 4, 2, 3, 1, 4, 2, 5, 3, 2, 6, 5, 1, 2, 1, 2, 1, 3, 4, 2, 3, 5, 5, 4, 1, 1, 6, 6, 4, 5, 5, 3, 1, 2, 3, 5, 2, 2, 5, 1, 6, 2, 6, 1, 5, 2, 5, 5, 4, 2, 5, 5, 3, 1, 4, 6, 1, 4, 5, 6, 5, 5, 2, 6, 4, 1, 1, 3, 4, 6, 2, 4, 3, 1, 3, 6, 3, 4, 5, 4, 4, 6, 3, 3, 5, 2, 3, 5, 3, 4, 6, 2, 3, 6, 5, 1, 4, 3, 5, 6, 6, 2, 5, 2, 1, 5, 3, 2, 4, 4, 6, 5, 4, 1, 4, 2, 6, 5, 5, 6, 5, 4, 2, 1, 4, 4, 6, 5, 6, 2, 5, 4, 2, 1, 6, 2, 3, 2, 4, 3, 6, 1, 3, 6, 1, 3, 5, 3, 5, 4, 2, 4, 4, 5, 5, 6, 5, 5, 3, 2, 1, 3, 6, 3, 4, 2, 3, 4, 6, 5, 6, 6, 3, 3, 1, 3, 6, 6, 2, 3, 6, 2, 3, 6, 5, 2, 5, 6, 1, 1, 1, 3, 1, 4, 3, 3, 2, 2, 2, 4, 3, 5, 1, 5, 4, 2, 6, 2, 4, 3, 1, 4, 4, 1, 1, 1, 1, 5, 3, 3, 5, 6, 1, 2, 4, 2, 5, 4, 4, 6, 5, 4, 2, 6, 4, 3, 6, 6, 4, 1, 4, 6, 4, 1, 5, 6, 6, 1, 6, 3, 6, 4, 6, 3, 6, 3, 2, 6, 4, 2, 6, 3, 1, 3, 1, 3, 5, 6, 6, 2, 6, 3, 5, 3, 3, 4, 3, 2, 5, 6, 5, 6, 3, 2, 4, 1, 2, 2, 4, 4, 3, 1, 2, 1, 6, 3, 4, 4, 2, 2, 1, 2, 2, 6, 6, 1, 6, 2, 6, 6, 2, 6, 3, 1, 5, 5, 2, 6, 2, 3, 5, 5, 5, 2, 4, 5, 2, 4, 3, 6, 1, 6, 5, 1, 5, 3, 2, 4, 3, 4, 5, 4, 5, 1, 2, 1, 1, 2, 2, 4, 4, 2, 2, 6, 1, 6, 1, 6, 6, 5, 6, 3, 3, 6, 5, 4, 6, 2, 4, 2, 6, 4, 6, 3, 3, 2, 4, 1, 4, 6, 4, 1, 5, 2, 6, 3, 2, 6, 1, 4, 5, 4, 4, 3, 4, 2, 6, 6, 6, 4, 5, 3, 1, 5, 3, 2, 1, 4, 2, 6, 6, 3, 4, 3, 1, 4, 4, 6, 3, 4, 2, 6, 3, 4, 5, 1, 3, 4, 5, 1, 6, 6, 4, 3, 1, 1, 3, 2, 1, 5, 6, 2, 1, 1, 1, 6, 4, 6, 4, 6, 3, 2, 1, 6, 4, 4, 3, 2, 6, 2, 2, 1, 1, 1, 1, 1, 4, 4, 4, 4, 2, 3, 2, 6, 2, 2, 3, 6, 6, 6, 4, 6, 1, 3, 6, 2, 5, 6, 5, 1, 3, 4, 4, 3, 6, 1, 3, 3, 3, 6, 6, 5, 3, 2, 2, 2, 2, 2, 4, 1, 4, 4, 6, 6, 1, 4, 1, 2, 5, 6, 3, 6, 6, 1, 4, 6, 3, 1, 3, 6, 2, 2, 3, 4, 3, 2, 4, 5, 2, 2, 3, 5, 3, 5, 5, 2, 6, 5, 4, 6, 6, 4, 5, 5, 4, 1, 2, 4, 6, 4, 1, 4, 4, 4, 1, 1, 6, 4, 1, 6, 4, 3, 4, 3, 1, 2, 6, 2, 2, 6, 3, 2, 5, 6, 5, 4, 4, 3, 2, 4, 5, 1, 2, 4, 5, 2, 6, 4, 2, 6, 3, 4, 4, 6, 2, 5, 5, 4, 6, 6, 2, 3, 1, 5, 1, 4, 3, 3, 3, 4, 5, 4, 6, 5, 2, 3, 4, 2, 3, 5, 3, 6, 2, 3, 3, 3, 2, 6, 5, 2, 2, 1, 4, 1, 5, 1, 3, 6, 2, 5, 1, 2, 1, 3, 1, 6, 6, 3, 3, 5, 2, 5, 6, 1, 2, 2, 3, 2, 3, 6, 2, 2, 1, 6, 6, 2, 2, 3, 3, 2, 3, 5, 1, 6, 2, 4, 5, 6, 1, 1, 6, 3, 1, 6, 2, 5, 5, 6, 1, 2, 4, 3, 4, 6, 2, 5, 6, 1, 2, 1, 1, 2, 2, 2, 2, 1, 3, 2, 4, 6, 5, 1, 2, 4, 4, 1, 4, 5, 6, 3, 3, 1, 4, 6, 3, 5, 5, 4, 6, 6, 5, 3, 6, 2, 6, 6, 1, 2, 1, 4, 5, 4, 2, 5, 1, 2, 5, 2, 6, 5, 5, 1, 1, 5, 3, 6, 1, 4, 2, 5, 2, 4, 4, 6, 6, 3, 3, 4, 6, 1, 3, 2, 5, 1, 5, 5, 5, 6, 3, 2, 1, 1, 5, 1, 4, 5, 2, 5, 2, 2, 6, 4, 5, 6, 2, 3, 6, 5, 4, 5, 3, 1, 1, 5, 2, 6, 2, 4, 5, 2, 5, 4, 3, 1, 2, 1, 3, 2, 4, 5, 1, 5, 5, 1, 3, 4, 2, 6, 2, 5, 6, 5, 5, 4, 4, 6, 1, 4, 2, 3, 1, 5, 3, 2, 5, 6, 3, 5, 4, 2, 2, 1, 5, 3, 3, 5, 2, 2, 1, 4, 4, 1, 4, 2, 4, 1, 1, 1, 3, 1, 2, 2, 4, 3, 5, 5, 1, 2, 1, 5, 1, 5, 1, 5, 5, 6, 5, 3, 3, 6, 3, 5, 6, 4, 2, 3, 4, 3, 1, 3, 2, 1, 4, 4, 2, 2, 4, 1, 6, 5, 1, 1, 1, 4, 5, 4, 6, 6, 6, 2, 2, 5, 1, 2, 6, 3, 1, 4, 4, 5, 6, 3, 5, 4, 4, 1, 2, 6, 1, 3, 1, 1, 4, 1, 5, 1, 4, 3, 1, 3, 4, 2, 3, 2, 3, 1, 2, 4, 1, 4, 2, 6, 2, 3, 2, 6, 6, 1, 3, 3, 3, 6, 4, 3, 4, 1, 3, 2, 4, 1, 1, 4, 4, 5, 2, 2, 1, 3, 2, 2, 3, 3, 1, 4, 3, 5, 1, 3, 3, 3, 3, 3, 2, 5, 1, 3, 5, 4, 5, 6, 2, 5, 1, 4, 4, 1, 2, 2, 5, 6, 6, 1, 3, 4, 1, 1, 4, 1, 5, 2, 4, 2, 2, 1, 5, 1, 5, 1, 2, 3, 3, 4, 2, 2, 1, 3, 2, 3, 5, 4, 3, 4, 3, 5, 6, 3, 5, 6, 5, 1, 6, 3, 6, 3, 6, 5, 5, 5, 5, 5, 3, 5, 4, 2, 4, 3, 3, 2, 1, 6, 6, 1, 6, 4, 1, 5, 2, 1, 1, 2, 1, 1, 4, 5, 3, 2, 1, 1, 1, 1, 3, 3, 4, 5, 1, 4, 4, 2, 6, 6, 5, 3, 4, 6, 5, 6, 6, 6, 4, 4, 5, 3, 1, 1, 3, 3, 6, 4, 5, 1, 1, 3, 6, 1, 5, 2, 3, 5, 4, 6, 6, 3, 4, 1, 1, 1, 2, 2, 3, 3, 1, 4, 5, 1, 1, 2, 2, 3, 6, 6, 1, 3, 2, 2, 6, 6, 4, 6, 4, 4, 4, 5, 6, 2, 2, 2, 3, 1, 5, 3, 6, 6, 2, 6, 6, 6, 4, 6, 1, 1, 3, 3, 3, 1, 6, 4, 4, 1, 5, 6, 5, 1, 3, 1, 1, 1, 4, 1, 2, 4, 4, 3, 6, 4, 3, 3, 4, 6, 3, 6, 4, 6, 1, 6, 1, 1, 2, 6, 1, 3, 2, 4, 1, 4, 4, 1, 4, 5, 2, 1, 6, 6, 3, 2, 4, 2, 1, 2, 5, 4, 6, 3, 1, 1, 1, 4, 2, 5, 3, 5, 1, 6, 4, 4, 5, 5, 1, 3, 1, 5, 4, 6, 5, 1, 2, 2, 6, 6, 5, 2, 6, 5, 4, 6, 2, 2, 6, 5, 2, 6, 2, 1, 4, 3, 5, 2, 1, 1, 3, 6, 1, 3, 2, 2, 1, 1, 1, 6, 2, 4, 1, 2, 1, 3, 4, 5, 4, 2, 3, 1, 6, 2, 6, 1, 1, 6, 2, 4, 1, 6, 4, 6, 5, 4, 1, 3, 6, 1, 4, 6, 2, 5, 2, 1, 2, 3, 2, 3, 6, 3, 6, 3, 5, 3, 4, 1, 2, 1, 1, 6, 5, 6, 5, 1, 1, 4, 5, 4, 1, 6, 3, 3, 1, 6, 2, 6, 6, 6, 1, 4, 4, 6, 2, 4, 2, 5, 3, 5, 6, 4, 3, 1, 1, 4, 3, 1, 5, 1, 4, 2, 6, 4, 1, 6, 2, 1, 3, 5, 2, 3, 1, 6, 4, 3, 6, 6, 1, 5, 2, 6, 1, 3, 4, 1, 4, 5, 6, 4, 4, 1, 1, 6, 4, 1, 2, 1, 5, 3, 2, 5, 3, 4, 1, 4, 2, 1, 1, 4, 2, 2, 2, 4, 1, 2, 3, 5, 1, 4, 4, 3, 6, 5, 4, 4, 5, 4, 1, 4, 3, 4, 6, 2, 5, 6, 5, 6, 5, 4, 1, 3, 4, 6, 1, 2, 6, 1, 1, 2, 4, 1, 3, 1, 5, 6, 4, 5, 5, 2, 3, 4, 4, 5, 3, 4, 2, 6, 4, 2, 2, 4, 3, 2, 4, 5, 5, 6, 1, 2, 4, 5, 1, 6, 4, 6, 6, 3, 4, 1, 1, 1, 2, 5, 5, 1, 5, 2, 2, 6, 4, 1, 2, 5, 5, 2, 6, 5, 4, 5, 3, 6, 2, 4, 3, 6, 5, 6, 6, 4, 2, 4, 4, 3, 1, 6, 4, 6, 6, 3, 2, 3, 5, 4, 3, 6, 4, 3, 3, 4, 5, 6, 3, 3, 3, 3, 1, 4, 2, 1, 4, 2, 2, 4, 1, 2, 2, 4, 1, 4, 5, 5, 5, 2, 4, 1, 5, 4, 6, 2, 6, 4, 2, 2, 6, 2, 4, 4, 4, 4, 6, 1, 5, 3, 3, 5, 1, 6, 5, 1, 3, 2, 6, 2, 5, 1, 5, 2, 6, 2, 3, 4, 6, 4, 4, 2, 6, 6, 4, 5, 6, 5, 4, 4, 1, 2, 1, 3, 3, 2, 2, 5, 1, 1, 5, 6, 4, 5, 4, 6, 2, 6, 6, 4, 2, 5, 5, 1, 1, 5, 6, 6, 1, 2, 5, 3, 4, 2, 3, 5, 5, 2, 6, 4, 6, 6, 5, 4, 1, 4, 6, 2, 1, 4, 2, 5, 6, 4, 6, 2, 4, 3, 6, 6, 4, 3, 2, 1, 4, 4, 6, 4, 4, 4, 3, 6, 4, 5, 6, 2, 4, 6, 3, 3, 3, 2, 4, 1, 6, 2, 5, 3, 6, 5, 5, 4, 4, 1, 4, 4, 5, 4, 6, 2, 6, 2, 1, 6, 5, 2, 6, 5, 4, 3, 3, 1, 4, 1, 5, 4, 5, 4, 3, 3, 6, 3, 4, 6, 2, 5, 1, 2, 3, 2, 6, 5, 5, 6, 2, 6, 1, 3, 4, 5, 6, 5, 2, 3, 2, 3, 4, 3, 4, 1, 5, 6, 1, 5, 4, 2, 1, 3, 3, 2, 6, 4, 3, 5, 4, 3, 2, 4, 4, 5, 1, 5, 1, 1, 4, 3, 5, 3, 1, 6, 5, 4, 3, 1, 6, 6, 5, 1, 3, 1, 4, 3, 2, 4, 3, 6, 6, 4, 2, 4, 6, 4, 2, 6, 3, 3, 3, 5, 3, 6, 6, 2, 3, 5, 4, 3, 3, 3, 4, 5, 3, 4, 4, 1, 2, 5, 5, 3, 5, 3, 2, 4, 6, 3, 6, 2, 1, 3, 3, 5, 3, 1, 2, 3, 6, 3, 4, 3, 6, 2, 4, 2, 2, 6, 2, 4, 1, 6, 3, 4, 1, 1, 1, 4, 3, 6, 4, 3, 3, 2, 6, 1, 6, 4, 2, 4, 2, 4, 2, 6, 2, 4, 6, 2, 2, 2, 3, 4, 5, 1, 2, 3, 3, 5, 4, 3, 1, 3, 6, 3, 2, 4, 4, 2, 6, 4, 6, 2, 2, 1, 1, 2, 4, 3, 3, 6, 5, 4, 6, 5, 2, 6, 5, 3, 4, 4, 1, 3, 5, 4, 1, 6, 3, 1, 5, 4, 6, 4, 5, 4, 2, 4, 1, 6, 1, 4, 3, 1, 6, 4, 1, 3, 3, 6, 3, 4, 1, 4, 3, 6, 4, 5, 1, 2, 1, 3, 3, 6, 1, 5, 3, 1, 3, 4, 3, 3, 1, 6, 3, 3, 3, 1, 1, 4, 4, 1, 5, 2, 5, 4, 6, 6, 3, 4, 5, 1, 6, 5, 2, 6, 2, 2, 4, 6, 3, 4, 1, 3, 5, 1, 4, 1, 3, 1, 6, 6, 4, 6, 3, 3, 3, 4, 4, 3, 1, 6, 6, 6, 4, 2, 4, 5, 6, 1, 3, 4, 2, 1, 6, 6, 2, 3, 6, 4, 5, 1, 6, 1, 6, 6, 6, 4, 2, 3, 5, 4, 1, 6, 5, 4, 1, 2, 4, 5, 6, 4, 4, 3, 6, 1, 5, 4, 1, 4, 2, 6, 1, 3, 3, 5, 3, 5, 6, 6, 6, 6, 4, 3, 2, 4, 3, 2, 4, 3, 2, 2, 4, 6, 2, 1, 1, 6, 3, 3, 4, 2, 1, 3, 1, 6, 1, 6, 2, 6, 1, 5, 4, 1, 5, 4, 3, 3, 6, 4, 3, 6, 5, 1, 4, 1, 1, 3, 4, 2, 3, 3, 4, 6, 3, 3, 3, 5, 6, 1, 1, 3, 1, 5, 4, 1, 5, 4, 5, 5, 3, 3, 6, 4, 6, 2, 3, 6, 2, 1, 5, 3, 2, 5, 4, 3, 5, 4, 3, 2, 2, 5, 3, 6, 4, 4, 1, 6, 5, 3, 2, 5, 2, 6, 3, 1, 2, 1, 6, 1, 5, 4, 4, 2, 6, 3, 5, 1, 6, 6, 6, 6, 3, 1, 4, 1, 5, 1, 1, 5, 6, 3, 2, 2, 2, 5, 4, 1, 3, 2, 1, 2, 1, 6, 3, 1, 3, 1, 5, 3, 1, 3, 6, 6, 1, 3, 6, 5, 3, 3, 1, 1, 5, 3, 5, 6, 6, 1, 5, 6, 1, 4, 3, 3, 4, 5, 2, 2, 1, 1, 2, 6, 3, 3, 5, 2, 3, 1, 4, 3, 2, 2, 2, 1, 3, 2, 1, 2, 3, 2, 2, 5, 3, 6, 3, 4, 5, 3, 3, 1, 3, 5, 3, 1, 4, 5, 1, 6, 6, 1, 2, 5, 4, 1, 1, 5, 2, 3, 2, 3, 3, 3, 1, 2, 3, 5, 1, 3, 1, 5, 6, 6, 6, 6, 5, 6, 4, 4, 5, 2, 3, 2, 1, 1, 6, 1, 3, 3, 6, 2, 4, 1, 6, 3, 3, 6, 2, 2, 6, 3, 1, 1, 6, 6, 6, 1, 5, 1, 1, 6, 4, 1, 3, 1, 3, 4, 1, 6, 4, 4, 1, 6, 1, 6, 4, 5, 3, 4, 2, 2, 2, 4, 5, 6, 3, 6, 2, 5, 2, 3, 3, 1, 4, 5, 3, 1, 2, 6, 2, 6, 2, 5, 3, 2, 5, 3, 1, 2, 2, 5, 6, 4, 4, 3, 1, 2, 1, 3, 5, 6, 3, 1, 2, 6, 6, 4, 1, 3, 1, 3, 2, 5, 1, 1, 1, 1, 4, 6, 3, 4, 4, 2, 4, 6, 3, 2, 4, 1, 1, 4, 5, 4, 3, 4, 1, 3, 2, 2, 3, 4, 5, 5, 1, 2, 6, 5, 4, 5, 3, 4, 1, 3, 1, 6, 2, 6, 6, 3, 1, 2, 5, 4, 1, 4, 5, 6, 5, 3, 5, 5, 3, 1, 3, 5, 5, 2, 4, 1, 2, 2, 1, 4, 3, 5, 1, 3, 1, 6, 5, 1, 6, 2, 2, 4, 6, 4, 3, 5, 6, 6, 3, 5, 6, 3, 3, 4, 3, 1, 3, 6, 4, 2, 6, 2, 5, 1, 2, 3, 4, 1, 2, 6, 1, 3, 6, 6, 4, 2, 1, 2, 2, 5, 3, 6, 6, 4, 1, 1, 3, 2, 4, 5, 4, 6, 1, 4, 3, 4, 3, 2, 2, 5, 2, 2, 2, 3, 5, 6, 6, 2, 6, 2, 4, 3, 6, 1, 5, 6, 1, 4, 6, 6, 4, 3, 1, 3, 1, 2, 2, 5, 5, 4, 2, 3, 2, 6, 5, 4, 4, 5, 1, 1, 4, 5, 5, 5, 4, 3, 6, 1, 4, 2, 1, 5, 2, 5, 2, 5, 3, 4, 4, 4, 1, 6, 1, 5, 3, 5, 5, 2, 1, 2, 5, 2, 6, 6, 4, 1, 1, 1, 1, 1, 5, 4, 2, 5, 4, 2, 6, 4, 2, 3, 2, 1, 5, 5, 5, 4, 1, 5, 6, 3, 3, 1, 3, 5, 3, 3, 2, 1, 1, 1, 2, 5, 2, 5, 4, 6, 2, 1, 6, 2, 2, 4, 2, 1, 5, 1, 4, 6, 1, 6, 6, 1, 2, 4, 5, 2, 6, 3, 6, 3, 6, 1, 4, 5, 4, 5, 4, 2, 1, 4, 5, 3, 6, 2, 6, 4, 6, 3, 3, 4, 5, 1, 3, 3, 3, 3, 6, 6, 3, 2, 5, 2, 3, 3, 1, 4, 4, 1, 2, 4, 5, 4, 6, 2, 3, 3, 3, 1, 5, 4, 2, 3, 4, 4, 6, 2, 3, 5, 6, 1, 4, 4, 3, 6, 1, 4, 2, 2, 4, 2, 1, 1, 4, 3, 3, 1, 3, 6, 2, 2, 1, 6, 1, 5, 2, 5, 3, 1, 4, 2, 1, 1, 1, 2, 6, 3, 1, 3, 5, 3, 3, 1, 3, 5, 6, 2, 5, 1, 3, 2, 3, 2, 4, 2, 1, 3, 5, 6, 3, 3, 6, 3, 1, 1, 2, 4, 6, 3, 2, 5, 3, 4, 6, 6, 3, 4, 4, 2, 2, 5, 4, 6, 1, 3, 1, 3, 4, 5, 6, 6, 5, 1, 1, 6, 6, 6, 1, 2, 4, 6, 1, 2, 3, 5, 4, 5, 6, 4, 6, 4, 4, 1, 6, 6, 3, 2, 3, 2, 6, 5, 1, 5, 2, 5, 2, 5, 2, 6, 5, 1, 3, 1, 3, 6, 5, 4, 2, 5, 2, 3, 6, 4, 3, 4, 3, 2, 3, 2, 5, 1, 2, 5, 3, 5, 4, 1, 4, 1, 5, 4, 2, 6, 2, 1, 6, 3, 1, 2, 6, 3, 6, 5, 4, 2, 5, 5, 6, 6, 3, 6, 4, 4, 3, 1, 4, 3, 1, 5, 6, 5, 6, 5, 5, 1, 4, 1, 1, 6, 2, 2, 6, 2, 1, 6, 4, 4, 4, 4, 2, 5, 5, 5, 2, 4, 6, 1, 1, 6, 3, 6, 1, 2, 2, 3, 1, 4, 6, 3, 2, 3, 4, 2, 6, 2, 2, 4, 4, 3, 5, 4, 5, 4, 5, 6, 6, 6, 1, 1, 2, 6, 6, 5, 3, 3, 2, 3, 2, 3, 2, 2, 3, 1, 4, 2, 1, 3, 3, 3, 2, 4, 1, 1, 6, 2, 4, 3, 5, 1, 2, 5, 1, 5, 5, 5, 1, 5, 1, 6, 2, 6, 5, 4, 3, 5, 2, 2, 3, 2, 3, 5, 1, 5, 6, 3, 5, 2, 1, 6, 2, 6, 4, 5, 3, 5, 3, 3, 3, 4, 1, 6, 2, 4, 6, 1, 4, 3, 1, 6, 5, 6, 4, 6, 6, 2, 6, 4, 1, 6, 3, 2, 1, 3, 5, 6, 1, 4, 1, 3, 4, 3, 2, 6, 4, 6, 3, 5, 3, 6, 5, 1, 4, 2, 2, 2, 5, 5, 1, 4, 3, 5, 3, 3, 1, 3, 6, 4, 1, 1, 1, 6, 1, 1, 2, 6, 2, 1, 4, 4, 3, 2, 3, 4, 6, 3, 4, 4, 3, 2, 1, 2, 5, 3, 2, 4, 3, 1, 1, 3, 5, 3, 6, 5, 2, 1, 2, 1, 2, 2, 2, 5, 3, 4, 2, 2, 4, 5, 2, 4, 2, 1, 4, 4, 2, 3, 1, 6, 6, 1, 1, 1, 1, 6, 3, 1, 6, 2, 6, 1, 4, 6, 6, 2, 6, 2, 6, 1, 1, 1, 6, 1, 6, 1, 1, 2, 6, 3, 3, 4, 6, 5, 6, 6, 4, 4, 6, 5, 5, 2, 1, 3, 4, 5, 1, 3, 5, 4, 4, 2, 2, 1, 4, 3, 1, 4, 1, 1, 2, 1, 5, 2, 5, 5, 6, 6, 2, 4, 1, 5, 2, 2, 2, 4, 6, 1, 1, 4, 3, 2, 2, 6, 4, 3, 3, 1, 1, 5, 2, 2, 3, 2, 3, 4, 4, 2, 2, 6, 2, 5, 1, 4, 3, 3, 5, 1, 2, 6, 6, 1, 2, 5, 1, 6, 5, 5, 6, 2, 1, 5, 5, 1, 5, 3, 1, 4, 4, 4, 3, 3, 2, 3, 1, 1, 1, 5, 2, 4, 5, 4, 5, 3, 6, 5, 5, 1, 3, 4, 5, 5, 2, 5, 6, 2, 1, 1, 6, 2, 2, 5, 5, 4, 4, 2, 3, 1, 1, 5, 6, 4, 6, 2, 1, 4, 5, 3, 6, 5, 2, 3, 3, 5, 3, 3, 4, 5, 5, 2, 4, 4, 4, 1, 4, 3, 6, 4, 4, 3, 1, 1, 3, 5, 6, 1, 2, 2, 1, 1, 2, 2, 1, 6, 1, 6, 1, 5, 5, 3, 1, 5, 2, 5, 2, 4, 2, 4, 2, 6, 5, 2, 1, 1, 6, 6, 4, 2, 2, 3, 4, 5, 2, 1, 2, 3, 3, 5, 3, 3, 3, 3, 5, 4, 5, 3, 5, 6, 4, 1, 1, 1, 4, 4, 6, 3, 1, 5, 1, 4, 3, 4, 5, 5, 4, 1, 2, 5, 5, 1, 3, 6, 3, 2, 3, 4, 5, 5, 1, 2, 4, 4, 1, 1, 5, 6, 4, 6, 6, 4, 3, 5, 4, 6, 4, 3, 2, 3, 1, 4, 1, 5, 5, 6, 2, 5, 6, 4, 5, 6, 6, 4, 6, 6, 6, 5, 1, 3, 6, 6, 4, 4, 3, 6, 1, 5, 4, 2, 2, 6, 4, 3, 4, 5, 3, 5, 6, 2, 1, 4, 1, 1, 2, 3, 3, 2, 1, 4, 6, 1, 5, 6, 2, 4, 4, 5, 5, 3, 1, 4, 3, 3, 4, 1, 1, 2, 5, 2, 3, 5, 4, 1, 3, 1, 1, 4, 5, 6, 5, 5, 6, 6, 4, 2, 2, 3, 6, 2, 1, 2, 5, 6, 5, 6, 3, 4, 6, 1, 4, 1, 2, 2, 2, 4, 4, 3, 3, 6, 6, 6, 4, 4, 4, 5, 3, 3, 5, 2, 5, 5, 2, 6, 6, 3, 5, 3, 1, 6, 6, 3, 2, 2, 5, 3, 6, 4, 2, 6, 2, 3, 5, 6, 1, 2, 1, 1, 6, 2, 3, 5, 4, 2, 1, 4, 5, 3, 6, 1, 3, 3, 5, 2, 1, 6, 4, 6, 5, 4, 6, 3, 2, 2, 1, 3, 2, 6, 6, 3, 4, 4, 5, 2, 1, 5, 4, 4, 4, 2, 1, 4, 2, 4, 5, 6, 6, 2, 1, 2, 3, 6, 3, 1, 5, 4, 3, 3, 1, 1, 5, 2, 1, 4, 6, 3, 4, 5, 1, 6, 4, 6, 1, 2, 4, 1, 6, 1, 5, 5, 4, 2, 6, 1, 6, 3, 4, 5, 1, 1, 1, 1, 1, 6, 2, 6, 5, 5, 1, 6, 5, 2, 1, 3, 4, 4, 3, 6, 3, 6, 2, 1, 6, 5, 5, 6, 5, 6, 5, 4, 6, 6, 2, 3, 5, 4, 5, 3, 6, 5, 5, 5, 3, 6, 1, 5, 6, 3, 5, 4, 1, 2, 3, 3, 5, 6, 1, 5, 5, 4, 2, 3, 4, 2, 6, 5, 2, 4, 6, 4, 4, 6, 2, 3, 6, 4, 4, 4, 1, 4, 4, 6, 5, 4, 1, 4, 6, 3, 5, 6, 1, 5, 3, 6, 3, 2]\n"]}]},{"cell_type":"code","source":["#Counting the frequencies\n","frequencies = []\n","poss_results = range(1, die.num_sides+1)\n","for value in poss_results:\n","  frequency = results.count(value)\n","  frequencies.append(frequency)\n","print(frequencies)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C7_GnvQ_PhSz","executionInfo":{"status":"ok","timestamp":1727275774567,"user_tz":-420,"elapsed":394,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"857e6d0b-313f-4ac0-cce9-33c965ebf5b2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1736, 1659, 1684, 1726, 1524, 1671]\n"]}]},{"cell_type":"code","source":["#Making a Histogram\n","import plotly.express as px\n","\n","fig = px.bar(x=poss_results, y=frequencies)\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"ku3BsIuxPsVw","executionInfo":{"status":"ok","timestamp":1727275777261,"user_tz":-420,"elapsed":397,"user":{"displayName":"Việt Nguyễn Hoàng","userId":"02198390981127342287"}},"outputId":"109d239a-a4b9-48b1-9fdf-ef93eedde7f9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.35.2.min.js\"></script>                <div id=\"f03c37cb-0f2d-4e03-966a-48dbf2f74b0d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"f03c37cb-0f2d-4e03-966a-48dbf2f74b0d\")) {                    Plotly.newPlot(                        \"f03c37cb-0f2d-4e03-966a-48dbf2f74b0d\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"x=%{x}\\u003cbr\\u003ey=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[1,2,3,4,5,6],\"xaxis\":\"x\",\"y\":[1736,1659,1684,1726,1524,1671],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"x\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"y\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('f03c37cb-0f2d-4e03-966a-48dbf2f74b0d');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]}]}