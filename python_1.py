# -*- coding: utf-8 -*-
"""python 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Yo_MF9VtkHpJmk7O2aP4UguzRML4fN0

# **PRINT COMMAND**
"""

# comments
print ("Hello world") #"", ''
print1 = "Hello world"
print (print1.upper()) #Viết hoa
print (print1.lower()) #Viết thường
ten = input("Ten cua ban la_")
print (f'xin chao, {ten}')

first_name = "ada"
last_name = "lovelace"
full_name = f"{first_name} {last_name}"
print(full_name)

"""# **DATA TYPES & CONVERSION**"""

#data type
x = 5 #integer
y = 0.6 #float
z = 1/3  #float
a = " Dinh cong minh dep trai vkl" #string (str)
print (type (a), type (y), type (z))

# More data types
x1 = ["apple", "banana", "durian"] #list
type (x1)
x2 = 2j + 3 #complex number
type (x2)

#create a single random number
import random
print (random.randrange (0,10))

# conversion /force/ coercion data types
a1 = int (1.8) #force float number 1.2 to integer 1 => consider float a.b as interger a
print (3 + a1)

a2 = complex (3) #force integer to complex number, with the imanginary part as 0j
print (a2+3)

#more about string

x3 = '''dinh cong minh,
dinh cong phong,
mai thi hoa,
dinh van nam''' #string with multiple lines
print (x3)

# PYTHON BOOLEANS
# Python Arithmetic Operators (+, -, *, /, % (modulo), // (floor division))
b1 = 3%2
b2 = 3//2
print (type (b1), type (b2))
3/2

#Python Assignment Operators
x3 = 3
x3 +=5
print (x3)

#logical
y = 1
z = 2
print (y<2 and z > 3)
print (y<2 or z>3) #Comparision operator and logical operator
print (not(z<5 and y<10)) #Logical operator
print (y is int(1) and y is not int(2)) #Identity operator "is"
a3 = range(1,10)
print (a3)
for x in a3:
  print(x)
print (1.5 in a3)

"""# **LIST**"""

#List: A list is a collection which is ordered and changeable.
#In Python lists are written with square brackets.
thislist = ["nam", "hoa", 'minh','phong']
print (thislist[0]) # positive starter index
print(thislist[1])
print (thislist[-1] ) #negative index
print (thislist [0:4]) #index a range of positions
print (thislist[:3]) #leave out the starter index
print (thislist [-4:-1])

#length of a list
print(len (thislist))

#Change Item Value
thislist[0] = "bo Nam" #change the value at 0 position, from 'nam' to 'bo nam'
print (thislist)
thislist[0:2]= ["bo Nam", "me Hoa"]
print (thislist)

thislist_3 = [thislist, 1, "Minh"] #list trong list
print (thislist_3)
print (len(thislist_3))
thislist_3[0][1]

#Loop through a list
for x in thislist:
  print (f"xin chao, {x.title()}")

# SOME OTHER MANUPILATION USING LIST
thislist= ['a','b', 'c', 'd']

#add some elements
thislist.append ('orange')
thislist

#To add an item at the specified index, use the insert() method:
thislist.insert (3, "Vợ Minh")
print (thislist)
print (thislist)

thislist.remove ('orange')
thislist



#Remove items
#1

thislist.remove ('a')
print (thislist)

#2
del thislist [1:3] #delete from 1 to 3
print (thislist)

#3.
thislist.pop (0) #remove elements at position 0
print (thislist)

#check if Item Exists
if 'd' in thislist:
  print ('d')
if "phuong" in thislist:
  print ("phuong")

#COPY A LIST
#cannot copy a list simply by typing list2 = list1 / any changes in líst 1 can lead to change in list2
# list2 = list1 (wrong!!!)
#method 1
thislist_copy = thislist.copy()
print (thislist_copy)

#2.
thislist_copy_2 = list (thislist)
print (f"Day la phien ban copy thu hai, {thislist_copy_2}")

# JOIN 2 LISTS
# 1.
list_joint = thislist_copy + thislist_copy_2
print (list_joint)

#2.
list_joint_2 = thislist_copy.extend (thislist_copy_2) #Cannot joint more than 2 lists
print(list_joint_2)

#JOINT MULTIPLE
list_3 = ['ong', 'ba']
family = thislist_copy + thislist_copy_2 + list_3
print(family)

#TUPLE:is a collection which is ordered and unchangeable.
#In Python tuples are written with round brackets.

thistuple = ('orange', 'grape', 'apple')
print (thistuple)

print (thistuple[0]) # positive starter index
print(thistuple[1])
print (thistuple[-1] ) #negative index
print (thistuple [1:4]) #index a range of positions
print (thistuple[:3]) #leave out the starter index
print (thistuple [-4:-1])
# thistuple [0] = 'banana' =>WE CANNOT CHANGE THE VALUE OF TUPLE

#Unpacking tuples
t = ('foo', 'bar', 'baz', 'qux')
#unpack
(s1, s2, s3, s4) = t # s1 = ’foo’,s2 = ’bar’,s3 = ’baz’,s4 = ’qux’
print (s2)

"""# **DICTIONARY**"""

#PYTHON DICTIONARIES
# a collection which is unordered, changeable and indexed
# written with curly brackets, and they have keys and values

# Create a dictionary
thisdict = {
"brand": "Ford",
"model": "Mustang",
"year": 1964
}
print (thisdict)
print (len(thisdict))

# Check if an item exists
"brand" in thisdict

#Adding items
thisdict ["color"] ="white"
print(thisdict)

# Access an item
thisdict ["model"]

#Changing item's value
thisdict ["year"] = "2008"
print (thisdict)

# Loop through a dictionary
# 1.
thisdict_2 = {
    "brand": "Toshiba",
    "model": "1234X",
    "year": "2005"
}
for x in thisdict:
  print(thisdict [x])

#2. Using values() function:

thisdict_2 = {
    "brand": "Toshiba",
    "model": "1234X",
    "year": "2005"
}
for x in thisdict.values():
  print(x)

# REMOVING ITEMS

thisdict_2.pop ("model")
del thisdict_2 ["model"]
thisdict_2.clear () #clear all items

#copy
dict_3 = thisdict_2.copy ()
dict_4 = dict (thisdict_2)

# Nested Dictionaries / contains many dictionaries

myfamily_1 = {
    "dad" : {
        "name": "Bo Nam",
        "year": 1965
    },
    "mom": {
        "name": "me Hoa",
        "year": "1973"
    },
    "son": {
        "name":"Minh",
        "year": 2001
    }
}
print (myfamily_1)

# Way 2
dad = {
        "name": "Bo Nam",
        "year": 1965
    },
mom = {
        "name": "me Hoa",
        "year": "1973"
    },
son = {
        "name":"Minh",
        "year": 2001
    }
myfamily_2 = {
    "dad" :dad,
    "mom": mom,
    "son": son}
print (myfamily_2)

#3.
myfamily_3 = dict(
    dad = {"name": "Bo Nam", "year": 1965},
    mom = {"name": "me Hoa", "year": 1973},
    son = {"name": "Minh", "year": 2001}
)
print(myfamily_3)

myfamily_1["dad"]
print(myfamily_1)

friend = {
    "friend" : {
        "name": "X",
        "year": 2001
    }}

myfam_4 = myfamily_1.update (friend)
print(myfam_4)